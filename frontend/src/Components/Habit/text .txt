  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("default", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  };

  // calculate days difference
  const calculateDateDifference = (startDate, endDate) => {
    const diffTime = Math.abs(new Date(endDate) - new Date(startDate));
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const hasDates = habitDetails.startDate && habitDetails.endDate;
  const isOngoing = habitDetails.startDate && !habitDetails.endDate;

  // Delete
  const handleDelete = () => {
    deleteHabit(habitDetails._id);
  };

  // Update
  const handleUpdate = () => {
    setIsUpadting(true);
    setIsPopUp(true);
  };

  // Challenge completion
  const challenge = () => {
    const completedDays = habitDetails.completionDates.length;
    const totalDays = calculateDateDifference(
      habitDetails.startDate,
      habitDetails.endDate
    );

    // Edge case: prevent division by zero if totalDays is 0
    if (totalDays === 0) return "Invalid date range";

    if (completedDays === totalDays) {
      return "🏆 Challenge completed";
    }

    if (completedDays < totalDays) {
      // Return the fraction of completed days
      return `🎯 ${completedDays} / ${totalDays} Days Challenge`;
    }
  };

  // Streak Track
  const streakTracking = () => {
    const streakDateHistory = habitDetails.completionDates || [];
    let currentStreak = 0;
    let maxStreak = 0;

    if (streakDateHistory.length === 0) {
      return "🌱 Let's grow!";
    }

    for (let i = 0; i < streakDateHistory.length; i++) {
      if (i === 0) {
        currentStreak = 1;
      } else {
        const previousDate = new Date(streakDateHistory[i - 1]).setHours(
          0,
          0,
          0,
          0
        );
        const currentDate = new Date(streakDateHistory[i]).setHours(0, 0, 0, 0);

        // Calculate difference in days
        const dayDifference =
          (currentDate - previousDate) / (1000 * 60 * 60 * 24);

        if (dayDifference === 1) {
          currentStreak++;
        } else {
          currentStreak = 1;
        }
      }
      maxStreak = Math.max(currentStreak, maxStreak);
    }

    return maxStreak === 1 ? "🔥 1 Day Streak" : `🔥 ${maxStreak} Days Streak`;
  };
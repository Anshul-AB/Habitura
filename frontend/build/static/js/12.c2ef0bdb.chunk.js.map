{"version":3,"file":"static/js/12.c2ef0bdb.chunk.js","mappings":"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","sources":["Components/menus/HoverMenu.jsx","Components/dailyTasks/Card.jsx","Components/dailyTasks/DailyTasks.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { EllipsisOutlined } from \"@ant-design/icons\";\r\nimport { Dropdown, Space } from \"antd\";\r\n\r\nconst HoverMenu = ({ items }) => (\r\n  <Dropdown\r\n    menu={{\r\n      items: items.map((item) => ({\r\n        ...item,\r\n        label: (\r\n          <div\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              item.onClick && item.onClick(e); \r\n            }}\r\n            className=\"font-primary font-medium px-3\"\r\n          >\r\n            {item.label}\r\n          </div>\r\n        ),\r\n      })),\r\n    }}\r\n  >\r\n    <a onClick={(e) => e.preventDefault()} >\r\n      <Space >\r\n        <EllipsisOutlined />\r\n      </Space>\r\n    </a>\r\n  </Dropdown>\r\n);\r\n\r\nexport default HoverMenu;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { GiCheckMark } from \"react-icons/gi\";\r\nimport HoverMenu from \"../menus/HoverMenu\";\r\nimport { DeleteOutlined, UploadOutlined } from \"@ant-design/icons\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nconst Card = ({\r\n  task,\r\n  cardClass,\r\n  addCompletionDate,\r\n  taskId,\r\n  removeCompletionDate,\r\n  isTickMarked,\r\n  isChecked,\r\n  showMenu,\r\n  deleteTask,\r\n  updateTask,\r\n}) => {\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n\r\n  // Draggable div\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({ id: taskId });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n  };\r\n\r\n  // check / uncheck list\r\n  const handleToggle = () => {\r\n    const newToggleValue = !isCompleted;\r\n    setIsCompleted(newToggleValue);\r\n    if (newToggleValue) {\r\n      addCompletionDate(taskId); // add date\r\n    } else {\r\n      removeCompletionDate(taskId); // remove date\r\n    }\r\n    isTickMarked(taskId, newToggleValue); // update status directly with the new value\r\n  };\r\n\r\n  // Hover Menu items\r\n  const menuItems = [\r\n    {\r\n      key: \"1\",\r\n      label: \"Update\",\r\n      icon: <UploadOutlined />,\r\n      onClick: (e) => {\r\n        // e.stopPropagation();\r\n        // console.log(\"Upload clicked\");\r\n        updateTask(taskId, task);\r\n      },\r\n    },\r\n    {\r\n      key: \"2\",\r\n      label: \"Delete\",\r\n      icon: <DeleteOutlined />,\r\n      onClick: (e) => {\r\n        // e.stopPropagation();\r\n        deleteTask(taskId);\r\n      },\r\n      danger: true,\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setIsCompleted(isChecked); //get from server\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      {...attributes}\r\n      {...listeners}\r\n      className={`border-b border-coolsecondary border-opacity-30 p-1.5 mb-2 bg-opacity-30 flex justify-start items-center space-x-5 ${cardClass} ${\r\n        isDragging\r\n          ? \"opacity-50 shadow-lg cursor-grabbing z-50\"\r\n          : \"cursor-pointer\"\r\n      } `}\r\n    >\r\n      <div\r\n        className=\"bg-primary shadow-sm rounded-full cursor-pointer h-7 w-7 flex justify-center items-center\"\r\n        onClick={handleToggle}\r\n      >\r\n        {isCompleted && <GiCheckMark className=\"text-secondary text-sm\" />}\r\n      </div>\r\n      <div\r\n        className={`text-[13px] text-secondary ${\r\n          isCompleted && \"line-through\"\r\n        }`}\r\n      >\r\n        {task}\r\n      </div>\r\n\r\n      {/* Hover menu */}\r\n      <div className=\"flex flex-1 justify-end items-center cursor-pointer\">\r\n        {showMenu && (\r\n          <div\r\n            onClick={(e) => {\r\n              e.stopPropagation(); // Prevents drag interaction while interacting with the menu\r\n            }}\r\n          >\r\n            <HoverMenu items={menuItems} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nimport InputHabit from \"../formInputs/InputHabit\";\r\nimport { IoMdAdd } from \"react-icons/io\";\r\nimport PageHeading from \"../common/PageHeading\";\r\nimport { TiRefreshOutline } from \"react-icons/ti\";\r\nimport { MdFolderDelete } from \"react-icons/md\";\r\nimport { throttle } from \"../../utils/throttleandDebounce\";\r\nimport { HabitContext, TaskContext } from \"../../store/store\";\r\nimport {\r\n  DndContext,\r\n  closestCorners,\r\n  useSensor,\r\n  useSensors,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  KeyboardSensor,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  sortableKeyboardCoordinates,\r\n  SortableContext,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { makeAuthenticatedPUTRequest } from \"../../utils/serverHelpers\";\r\n\r\nconst DailyTasks = () => {\r\n  // Task Api's\r\n  const {\r\n    addTask,\r\n    getTasklist,\r\n    handleKeyDown,\r\n    updateTask,\r\n    handleUpdateClick,\r\n    deleteTask,\r\n    delAllTasks,\r\n    taskCompletionDate,\r\n    taskUncompleted,\r\n    isTaskChecked,\r\n    handleChange,\r\n    inputRef,\r\n    task,\r\n    isUpdating,\r\n    updateTaskId,\r\n    listOfTasks = [],\r\n    setListOfTasks,\r\n  } = useContext(TaskContext);\r\n\r\n  // Habit Api's\r\n  const {\r\n    listOfHabits,\r\n    showMenu,\r\n    getMyHabits,\r\n    habitCompleted,\r\n    habitUncompleted,\r\n    isHabitChecked,\r\n    uncheckAllHabits,\r\n  } = useContext(HabitContext);\r\n\r\n  // Draagable div\r\n  const handleDragEnd = async(event) => {\r\n    const { active, over } = event;\r\n    // Check if 'over' is null before accessing its properties\r\n    if (!over) {\r\n      // console.log(\"Dropped outside of any valid target.\");\r\n      return;\r\n    }\r\n    if (active.id !== over.id) {\r\n      const oldIndex = listOfTasks.findIndex((task) => task._id === active.id);\r\n      const newIndex = listOfTasks.findIndex((task) => task._id === over.id);\r\n      // Check if both indices are valid\r\n      if (oldIndex === -1 || newIndex === -1) {\r\n        // console.log(\"One of the task IDs was not found.\");\r\n        return;\r\n      }\r\n\r\n      const updatedTasks = arrayMove(listOfTasks, oldIndex, newIndex);\r\n      setListOfTasks(updatedTasks);\r\n      const taskOrder = updatedTasks.map(task=>task._id)\r\n      console.log(oldIndex, newIndex)\r\n\r\n      const response = await makeAuthenticatedPUTRequest('/task/order',{taskOrder});\r\n      console.log(response)\r\n      getTasklist();\r\n    }\r\n  };\r\n\r\n  const arrayMove = (array, from, to) => {\r\n    const newArray = [...array];\r\n    const [movedItem] = newArray.splice(from, 1);\r\n    newArray.splice(to, 0, movedItem);\r\n    return newArray;\r\n  };\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 10,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 250,\r\n        tolerance: 10,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  // Throttled Get Tasks and Habits\r\n  const throttledGetMyTasks = useCallback(throttle(getTasklist, 10000, []));\r\n  const throttledGetMyHabits = useCallback(throttle(getMyHabits, 10000, []));\r\n\r\n  useEffect(() => {\r\n    throttledGetMyHabits();\r\n    throttledGetMyTasks();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* head */}\r\n      <PageHeading title={\" Today's Tasks\"} />\r\n\r\n      {/* Input tasks */}\r\n      <div className=\"flex justify-center items-center mb-4 rounded-md space-x-3 bg-gray-100 shadow-md\">\r\n        <InputHabit\r\n          ref={inputRef}\r\n          type={\"text\"}\r\n          name={\"task\"}\r\n          value={task}\r\n          onChange={handleChange}\r\n          placeholder={\"Eg. Meeting with a client at 5 PM.\"}\r\n          className={\"bg-gray-100 pl-5\"}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n\r\n        <button\r\n          onClick={() => {\r\n            isUpdating ? handleUpdateClick(updateTaskId, task) : addTask();\r\n          }}\r\n          className=\"bg-primary h-full flex justify-center items-center text-secondary text-lg font-medium px-4 py-2 cursor-pointer hover:bg-coolsecondary hover:text-primary transition-colors duration-300 rounded-md\"\r\n        >\r\n          <IoMdAdd className=\"text-2xl mr-2\" />\r\n          {isUpdating ? \"Update\" : \"Add\"}\r\n        </button>\r\n      </div>\r\n\r\n      {/* View list */}\r\n      <div className=\"\">\r\n        {/* View habits */}\r\n        <div className=\"flex justify-between items-center \">\r\n          <p className=\"text-[10px] text-right font-medium text-secondary w-fit bg-green-100 rounded-sm p-1 mb-2 \">\r\n            My Habits\r\n          </p>\r\n          <TiRefreshOutline\r\n            title=\"Refresh habits\"\r\n            className=\"text-3xl text-coolsecondary hover:text-secondary cursor-pointer mb-2\"\r\n            onClick={uncheckAllHabits}\r\n          />\r\n        </div>\r\n        {listOfHabits.map((habit, index) => (\r\n          <Card\r\n            key={index}\r\n            task={habit.habit}\r\n            cardClass={\"bg-green-100\"}\r\n            addCompletionDate={habitCompleted}\r\n            removeCompletionDate={habitUncompleted}\r\n            isTickMarked={isHabitChecked}\r\n            taskId={habit._id}\r\n            isChecked={habit.isCompleted}\r\n          />\r\n        ))}\r\n\r\n        {/* view tasks */}\r\n        <div className=\"flex justify-between items-center \">\r\n          <p className=\"text-[10px] text-right font-medium text-secondary w-fit bg-cyan-100 rounded-sm p-1 my-2 \">\r\n            Today's Tasks\r\n          </p>\r\n          <MdFolderDelete\r\n            title=\"Delete all tasks\"\r\n            className=\"text-3xl text-coolsecondary hover:text-secondary cursor-pointer mb-2\"\r\n            onClick={delAllTasks}\r\n          />\r\n        </div>\r\n\r\n        <DndContext\r\n          collisionDetection={closestCorners}\r\n          onDragEnd={handleDragEnd}\r\n          sensors={sensors}\r\n        >\r\n          <SortableContext\r\n            items={listOfTasks}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            {listOfTasks.map((task, index) => (\r\n              <Card\r\n                key={index}\r\n                taskId={task._id}\r\n                task={task.task}\r\n                cardClass={\"bg-cyan-100\"}\r\n                showMenu={showMenu}\r\n                deleteTask={deleteTask}\r\n                updateTask={updateTask}\r\n                addCompletionDate={taskCompletionDate}\r\n                removeCompletionDate={taskUncompleted}\r\n                isChecked={task.isCompleted}\r\n                isTickMarked={isTaskChecked}\r\n              />\r\n            ))}\r\n          </SortableContext>\r\n        </DndContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyTasks;\r\n"],"names":["_ref","items","_jsx","Dropdown","menu","map","item","label","onClick","e","preventDefault","className","children","Space","EllipsisOutlined","task","cardClass","addCompletionDate","taskId","removeCompletionDate","isTickMarked","isChecked","showMenu","deleteTask","updateTask","isCompleted","setIsCompleted","useState","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","id","style","CSS","Transform","toString","menuItems","key","icon","UploadOutlined","DeleteOutlined","danger","useEffect","_jsxs","ref","handleToggle","newToggleValue","GiCheckMark","stopPropagation","HoverMenu","DailyTasks","addTask","getTasklist","handleKeyDown","handleUpdateClick","delAllTasks","taskCompletionDate","taskUncompleted","isTaskChecked","handleChange","inputRef","isUpdating","updateTaskId","listOfTasks","setListOfTasks","useContext","TaskContext","listOfHabits","getMyHabits","habitCompleted","habitUncompleted","isHabitChecked","uncheckAllHabits","HabitContext","arrayMove","array","from","to","newArray","movedItem","splice","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","throttledGetMyTasks","useCallback","throttle","throttledGetMyHabits","PageHeading","title","InputHabit","type","name","value","onChange","placeholder","onKeyDown","IoMdAdd","TiRefreshOutline","habit","index","Card","_id","MdFolderDelete","DndContext","collisionDetection","closestCorners","onDragEnd","async","active","over","event","oldIndex","findIndex","newIndex","updatedTasks","taskOrder","console","log","response","makeAuthenticatedPUTRequest","SortableContext","strategy","verticalListSortingStrategy"],"sourceRoot":""}